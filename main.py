from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from transformers import pipeline
import re

#—Ç–æ–∫–µ–Ω
BOT_TOKEN = "8493588022:AAERXiuRXReqU__lX4Td4bZI0-L-UMK24qw"

#–Ω–µ–π—Ä–æ—Å–µ—Ç—å
print("–Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
try:
    sentiment_analyzer = pipeline(
        "sentiment-analysis",
        model="Tinkoff/rubert-base-cased-sentiment-new",
        tokenizer="Tinkoff/rubert-base-cased-sentiment-new"
    )
    print("–ù–µ–π—Ä–æ—Å–µ—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {e}")
    sentiment_analyzer = None


POLITE = {"–ø–æ–∂–∞–ª—É–π—Å—Ç–∞", "–∏–∑–≤–∏–Ω–∏—Ç–µ", "—Å–ø–∞—Å–∏–±–æ"}
EMPATHY = {"–ø–æ–Ω–∏–º–∞—é", "—Å–æ–∂–∞–ª–µ—é", "–∂–∞–ª—å"}
NEXT_STEPS = {"—Å–¥–µ–ª–∞—é", "–ø–µ—Ä–µ–∑–≤–æ–Ω—é", "–æ—Ç–ø—Ä–∞–≤–ª—é"}


def analyze_text(text: str) -> tuple[str, list[str]]:
    """–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        #–µ—Å–ª–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ
        if sentiment_analyzer:
            result = sentiment_analyzer(text[:256])[0]  # –ï—â–µ –∫–æ—Ä–æ—á–µ —Ç–µ–∫—Å—Ç
            tone_en = result['label']
            confidence = result['score']

            tone_ru = {
                'POSITIVE': '–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π',
                'NEUTRAL': '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π',
                'NEGATIVE': '–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π',
                'LABEL_0': '–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π',
                'LABEL_1': '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π',
                'LABEL_2': '–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π'
            }.get(tone_en, '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π')
        else:

            words = text.lower().split()
            pos_count = sum(1 for word in words if word in {"—Å–ø–∞—Å–∏–±–æ", "—Ö–æ—Ä–æ—à–æ", "–æ—Ç–ª–∏—á–Ω–æ"})
            neg_count = sum(1 for word in words if word in {"–ø—Ä–æ–±–ª–µ–º–∞", "–ø–ª–æ—Ö–æ", "–æ—à–∏–±–∫–∞"})

            if pos_count > neg_count:
                tone_ru = "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π"
            elif neg_count > pos_count:
                tone_ru = "–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π"
            else:
                tone_ru = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"

       #—Ä–µ–∫–æ–º–µ–Ω
        words = text.lower().split()
        recs = []

        if tone_ru == "–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π" and not any(word in EMPATHY for word in words):
            recs.append("–î–æ–±–∞–≤—å—Ç–µ —ç–º–ø–∞—Ç–∏–∏: '–ü–æ–Ω–∏–º–∞—é –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é' ")

        if not any(word in POLITE for word in words):
            recs.append("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–∂–ª–∏–≤—ã–µ —Å–ª–æ–≤–∞:  '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '—Å–ø–∞—Å–∏–±–æ'")

        if not any(word in NEXT_STEPS for word in words):
            recs.append("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥: '–Ø –ø–µ—Ä–µ–∑–≤–æ–Ω—é', '–û—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º'")

        if not recs:
            recs.append("–û—Ç–ª–∏—á–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ")

        return tone_ru, recs[:2]

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π", ["–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç"]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –∏ —è –æ–ø—Ä–µ–¥–µ–ª—é —Ç–æ–Ω –æ–±—â–µ–Ω–∏—è + –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
    )


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if len(update.message.text) < 10:
            await update.message.reply_text("üìù –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–¥–ª–∏–Ω–Ω–µ–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return

        tone, recs = analyze_text(update.message.text)

        reply = f" <b>–¢–æ–Ω —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:</b> {tone}\n\n"
        reply += " <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"

        for i, rec in enumerate(recs, 1):
            reply += f"{i}. {rec}\n"


        await update.message.reply_text(reply, parse_mode='HTML')

    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


def main():
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()


if __name__ == "__main__":
    main()